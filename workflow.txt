cw plotter for lyra:
1. delete second tree view
2. press plot and plot the selected spectrum from the tree view
	add new axes to plot
		add dax variable to Plotter class for datasets
3. instead of plot lets make 2 buttons: X and Y channels.
(for now keep both)

19/10/20
make three processes:
one runs gui.
the other runs communication to the spectrometer
third runs plotting

done!

make window for setting parameters: inspire yourself by xEpr.
load from file button - load parameters from a given spectrum: load_btn
set up all parameters in fields:
	B_start_etry
	B_stop_etry
	B_step_etry
	..
	...
	....
setup scan window is created. when all scan parameters are set, click set scan button
..
...
....
how to implement electrochemistry here?
scan is set. 
Now lets set electrochemistry
0 mV - scan
100 mV - scan
...
...
...800 mV - scan
what so we do here?

we go to 100 mV, do 10 scans, go back to 0mV and rest there, do another 10 scans.

ok hold on.
we made the set scan scan window.
now lets implement it as a seperate python module.
Lets call it setup_scan.py and let us import it in the GUI later. (make a button for that too)


02/11/20
real testing.
Fake devices dont work now. Make sure they dont work accidently.
connect to lia and fc and run scan. No bridge, no resonator.

write lines to devices was a bad idea
implementing nruns.
nruns cycle implemented.
Implementing averaging feature:
	each scan gives bvals[] and signal[]
	after B0 cycle calculate list signal_averaged[] by averaging all scans that we had before. 
	Dont just add them up, weight! 
	signal_averaged = (signal_averaged + signal)/scans_that_have_been_done.

add live axes to the plotter. Plot live data in these axes. 
self.liveaxis = self.subplot.twinx()

plot live data on live axes.
going over averaged signal and how to assign its elements dynamically.
1st run append,
from second run average each point (last point each time)


wrote save function for spectra in cw_spectrum class.
making cw spectrum populating as the scan progresses

03/11/20
saving file
populate nruns ok
wtf is with the li_level why is that not saving? ok
modamp add dimension v
lets populate npoints v

ultimate goal:
	do electrochemical scan
next step:
	write def echem_scan and mostly copy it from cw_scan
	
04/11/20
echem scan. сделаем затычку сначала done
now when press run button you run echem experiment instead of simple cw.

I collect data.
It does not matter how I plot it,
main idea is to collect data.

the echem_scan method works with text.
write cw scan method.
What should it do?
It should give a scan back.
new_cw_scan = cw_scan(scan_setting,- b0 и так далее)
cw_scan it is an object.
it is created in its constructor.
you need to pass it parameters 
and you need to pass it a device communicator.
There we go.

cw_scan gives a scan that is bvalues[] and signal[]
let us call it single_cw_scan()

def single_cw_scan(parameters: scan_setting, communicator: communicator)
	bvalues = []
	signal = []
	
	bvalues_to_feed = scan_setting.b0s
	
	def __init__(self):
		for Bvalue_to_feed in bvalues_to_feed:
			communicator.set_magnetic_field(Bvalue_to_feed)
			magnetic_field_value = communicator.get_magnetic_field()
			signal_value = communicator.get_signal()
			
			bvalues.append(magnetic_field_value)
			signal.append(signal_value)
			sleep if you need to. You probably need to!
			
		# at the end of this for, you populate bvalues and signal
			
			
written set_field method in the bh-15 file. Dont confuse it with set_center_field

now we need to wait after setting the magnetic field.
lets make it a field in the setup_scan.
delay = time constant of lia * (conv_time + 1) - addigned in setup_scan.set_scan()
 
lets take delay from the setup_scan object and wait for this exact time
			
ok.
now lets record data from the lock-in amplifier.

for time being append B0s to signal
		
playing with plotting, it should not be so hard
i can plot points in the plot, ok
but there are too many points
each line should be a line instead.

maybe wiser would be to add elements to lines in the plots...
it plots weongly

whats wrong

it does not delete scan after it has been plotted...

now it can.
it plots right.
it does electrochemical scan and plots the line right.

now we want to accumulate each scan somewhere
lets make a list of scans.

lets add potential as a field to single_cw_scan


plotting averaged. continue at line 590 in main gui


09/11/2020 
I am damn sure I have modified this file after 4th of November. 
Now we can talk to the potentiostat.
It can set voltage and hopefully beep.
Lets test it.

In the main_gui class lets go to the echem_scan
and each time we set the new potential we would beep.
echem_scan() is the guy we need.
it beeps :3333333333333333333333333333333333333333333333333333
I play wierd tunes on it
Ok it seems to work.

Now save the spectra in the appropriate formats.

10/11/2020
I am on lyra.
I am starting the code.
I want to run it for two potentials.
0 and 1000 mV

I can talk to pot.
formatted output does not work for python 3.5
nado na morde pokazat u potentiostata eto. pust tok merajet hule emu budet

pochemuto lockin ne stavit sensitivity.
stavit, suka, 100 uV, i vsio tut!
gde bug?

bug v kode.

what controls that?
scan setting.
setup scan tochnee
hUi tam, netu tam. prichem suka otpravliaiet CODE=17, govorit po krainei mere. STOPE-
on pishet SCAL 17
chto znachit scal 17
eto ne SCAL a SENS lool
chtio takoe scal interesno#
scal bylo na novom SRS 860, u kotorogo display is fancy.
pohui. ubirai nahui!

snimaem spektry
n@c60 lezhit mezhdu 3365 i 3390

lets display current field and the current potential

done

plotting averaged data now.
we have a list of scans.
We want to plot the averaged value for them.

Lets take one scan.
Take its bvalues and first plot the first scan only.

I need a class.
cw_spectrum fits for this!

koro4e
cw spectrum bolshe ne klass.
eto budet method.
kotory budet sozdavat class cw_spectrum()! okak

cw_spectrum has a 'potential' field now.

ok now it is a spectrum that is returned by the method.
now echem_scan() operates with cw_spectra
plot_averaged_data now.
it takes a list[] of cw_spectra. [a b c d e f g ...]
plot (a.bvalues, a.signal)


it plots something but idk if that is averaging or not

saving in cw_spectrum sucks. it doesnt save the actual data!

signal is way too weak!
nc60 should be higher at 22 db. Why. Am I wrong. How to check. FscII.
Enough for today.

------- next steps -------
    in potentiostat, :SENSe:CURRent:RSENse ON fpr 4 wire measurements.
    check with fscII that you have the right signal.
    save individual scans.
    save averaged scans.
    in lockin, do both channels, not only R.

11/11/2020

so, we start with the potentiostat. we want it to be in 4 wire mode.
fscII give a different spectrum!
record X and Y, dont record R.

    lets go to lock-in.py and create two methods. getX and getY.
    there was a mistake. I was reading the Y channel ALL THE TIME!
    done getX and getY.

    in main_gui get the x and y, not r

    what is wrong with the magnetic field?

    do scaling of the plot

    too many print operations. bh15 speaks too much.
    disabeled visa log to screen

    the scan is happening too slow

    that seems to work but very slow. Will it make it overnight?
    Idk. We should try.
    How about saving files?

    lets save averaged spectra at each high potential and also averaged spectra at 0 potential.

    def make_spectrum_from_scans(high_scans: [cw_spectrum]): in cw_spectrum.py.
    make a spectrum with averaged scans. then save it.

    parameters are not saved in file. data is saved
    parameters save from scan setting.

    get mw frequency.
    measurement delay for each point?
    i fucked up the mod amp!
    whyyyy but WHYYY!!!!

    hmm. now when it is in volts, not in millivolts, all seem good. wtf

    plotting is shit. saving is shit!
    save in %.8e otherwise data is SHIT!

    def set_limits_of_x_averaged_axis(self, low,high): a method in Plotter.
    Used for scaling the axes so that you can see all that you plotted in this scan.

    in main_gui.py, scale the axes and keep that scale.
    when you plot the averaged data, just keep the scale the same.
    I also added offsets for x and y channels ibo hule net. ne vidno je nihrena!

    saving is ok.
    modamp is ok.

    mw freq needs to be recorded.
    written agilent_53181a.py.
    lets get frequency.

    added freq counter to communication.
    mw frequency is saved in files.

    13/11/2020
    we are ready to run the experiment
    lets take a cw spectrum of a tube.
    wowowowo lets first make a print of how much is left


    damn pstat sets wrong voltage.
    it is just a 4 wire measurement of current.
    lets do it. properly.

    potentiostat shit
    it doesnt let me do electrochemistry#
    i want 4 wire measurement of current, thats it.

CURR:NPLC 0.5 ??? time for meas current??

    pot works.
    wtf is wrong with the mpl, why is that SO slow?!
    plotting everything in one axis now



16/11/2020
echem scan going upwards and downwards.



23/11/2020
recording currents at each potential point.
Charging currents.
We may use them for making a kind of transient CV curve.


lets create a file with charging curves and save the data in it.

% structure of file %
date_time
potential current time
1          1e-2    0
1          2e-2    1
...
...
...



24/11/20
    something is wrong with the potentiostat reading. it triggers too often and too much.

30/11/20
    whats wrong with the time trigger?

08/12/20
    recording current transients at each potential. .chg file.
    potentiostat does not like to trigger...


11/12/20
    parameter import errors. .2f potential added to comment.


28/01/21
    plotter.plot_averaged_data adds a negative shift to y every time :/
    fix?

03/02/21
    added NRUN:int to echem_scan in main_gui.py
    to run multiple scans

    removed setting the limits in the plotter.plot_averaged_data


    plotting: add https://pypi.org/project/mpldatacursor/
    datacursor

02/03/22
    we go for scripts/
    we want to use python scripts to run experiments.
    for example, an experiment can be a class.
    it has to be a class.
    But one has to be able to change this class.
    It is going to be "unstable"
    but who ever cared about it?

    what do we do:

    it is magnettech. MS5000. It has ESRStudio.
    it has to be controlled.
    some things have to be set up by a human.
    There can be an API. Fuck that. For now.

    right_hand can be the module that presses certain buttons.
    Again, autohotkey is doing the job for now so its okay.

    what would exp look like:

    импортировать спектрометр?

    ок эмре сидит за компьютером и нажимает на кномки.
    a file for experiment would be like this:

    import emres_right_hand # the thing that clicks buttons
    class my_experiment:
    def __init__()
        # scan an epr scan
        potentiostat.set_potential()
        emres_right_hand.cooldown()
        emres_right_hand.scan_epr()




    class experiment()
        communicator: communicator

