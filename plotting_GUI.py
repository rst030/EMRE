#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.21
#  in conjunction with Tcl version 8.6
#    Oct 11, 2020 10:30:59 PM CEST  platform: Windows NT
#       Ilia Kulikov ilia.kulikov@fu-berlin.de

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import cw_spectrum # class for storing cw spectra from Lyra.
import Plotter


def start_plotter_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = cw_gui(root)
    root.mainloop()

class cw_gui:
    plt = Plotter.Plotter  # for plotting everything in the main window: hall basically, but also admittance and IV
    spectrum_A = cw_spectrum.cw_spectrum # by default there is nothing in the spectrum's placeholder
    ds = []  # variable for datasets. It is a list of cw_spectrum.cw_spectrum
    cur_index = 0 # index in dataset. changes when clocked on datasets in tree views.

    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        # -------------------------- this block is generated by page gui app: ------------------------------------------

        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1635x836+252+177")
        top.title("New Toplevel")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.btn_open = tk.Button(top)
        self.btn_open.place(relx=0.006, rely=0.012, height=24, width=78)
        self.btn_open.configure(activebackground="#ececec")
        self.btn_open.configure(activeforeground="#000000")
        self.btn_open.configure(background="#d9d9d9")
        self.btn_open.configure(disabledforeground="#a3a3a3")
        self.btn_open.configure(foreground="#000000")
        self.btn_open.configure(highlightbackground="#d9d9d9")
        self.btn_open.configure(highlightcolor="black")
        self.btn_open.configure(pady="0")
        self.btn_open.configure(text='''Open''')

        self.nrm_btn = tk.Button(top)
        self.nrm_btn.place(relx=0.373, rely=0.574, height=24, width=77)
        self.nrm_btn.configure(activebackground="#ececec")
        self.nrm_btn.configure(activeforeground="#000000")
        self.nrm_btn.configure(background="#d9d9d9")
        self.nrm_btn.configure(disabledforeground="#a3a3a3")
        self.nrm_btn.configure(foreground="#000000")
        self.nrm_btn.configure(highlightbackground="#d9d9d9")
        self.nrm_btn.configure(highlightcolor="black")
        self.nrm_btn.configure(pady="0")
        self.nrm_btn.configure(text='''Normalize''')

        self.Viewer_Frame = tk.Frame(top)
        self.Viewer_Frame.place(relx=0.428, rely=0.012, relheight=0.76
                , relwidth=0.56)
        self.Viewer_Frame.configure(relief='sunken')
        self.Viewer_Frame.configure(borderwidth="2")
        self.Viewer_Frame.configure(relief='sunken')
        self.Viewer_Frame.configure(background="#d9d9d9")
        self.Viewer_Frame.configure(highlightbackground="#d9d9d9")
        self.Viewer_Frame.configure(highlightcolor="black")
        self.Viewer_Frame.configure(width=915)

        self.frq_corr = tk.Button(top)
        self.frq_corr.place(relx=0.373, rely=0.538, height=24, width=77)
        self.frq_corr.configure(activebackground="#ececec")
        self.frq_corr.configure(activeforeground="#000000")
        self.frq_corr.configure(background="#d9d9d9")
        self.frq_corr.configure(disabledforeground="#a3a3a3")
        self.frq_corr.configure(foreground="#000000")
        self.frq_corr.configure(highlightbackground="#d9d9d9")
        self.frq_corr.configure(highlightcolor="black")
        self.frq_corr.configure(pady="0")
        self.frq_corr.configure(text='''Freq corr''')

        self.TFrame1 = ttk.Frame(top)
        self.TFrame1.place(relx=0.006, rely=0.096, relheight=0.353
                , relwidth=0.358)
        self.TFrame1.configure(relief='groove')
        self.TFrame1.configure(borderwidth="2")
        self.TFrame1.configure(relief='groove')
        self.TFrame1.configure(width=585)

        self.plt_btn = ttk.Button(top)
        self.plt_btn.place(relx=0.373, rely=0.239, height=25, width=76)
        self.plt_btn.configure(takefocus="")
        self.plt_btn.configure(text='''Plot''')

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.006, rely=0.072, height=21, width=90)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Dataset Browser''')

        self.x_ch_btn = tk.Button(top)
        self.x_ch_btn.place(relx=0.373, rely=0.275, height=34, width=37)
        self.x_ch_btn.configure(activebackground="#ececec")
        self.x_ch_btn.configure(activeforeground="#000000")
        self.x_ch_btn.configure(background="#d9d9d9")
        self.x_ch_btn.configure(disabledforeground="#a3a3a3")
        self.x_ch_btn.configure(foreground="#000000")
        self.x_ch_btn.configure(highlightbackground="#d9d9d9")
        self.x_ch_btn.configure(highlightcolor="black")
        self.x_ch_btn.configure(pady="0")
        self.x_ch_btn.configure(text='''X''')
        self.x_ch_btn.configure(width=37)

        self.y_ch_btn = tk.Button(top)
        self.y_ch_btn.place(relx=0.398, rely=0.275, height=34, width=37)
        self.y_ch_btn.configure(activebackground="#ececec")
        self.y_ch_btn.configure(activeforeground="#000000")
        self.y_ch_btn.configure(background="#d9d9d9")
        self.y_ch_btn.configure(disabledforeground="#a3a3a3")
        self.y_ch_btn.configure(foreground="#000000")
        self.y_ch_btn.configure(highlightbackground="#d9d9d9")
        self.y_ch_btn.configure(highlightcolor="black")
        self.y_ch_btn.configure(pady="0")
        self.y_ch_btn.configure(text='''Y''')
        self.y_ch_btn.configure(width=37)

        # --------------------------------------------------------------------------------------------------------------
        # ------------------ DATASET BROWSER: tree view for viewing the spectra as list: -------------------------------
        self.tree = ttk.Treeview(self.TFrame1, selectmode="extended")
        tree = self.tree
        tree["columns"] = ("one", "two")
        self.TFrame1.update() # need to do that in order to get its width and height
        tree.column("#0", width= round(tree.master.winfo_width()*3/4), stretch=True)
        tree.column("one", width= round(tree.master.winfo_width()*1/8))
        tree.column("two", width= round(tree.master.winfo_width()*1/8))
        tree.heading("#0", text="Filename")
        tree.heading("one", text="power [dB]")
        tree.heading("two", text="mod [G]")
        tree.pack(expand=1, fill="both", side="bottom")
        tree.bind("<Button-1>", self.onTreeClicked)


        # ---------------------------- configuring buttons: --------------------------------
        self.btn_open.configure(command = self.open_spectrum) # click a button and a spectrum opens up in tree view
        self.nrm_btn.configure(command=self.normalize)  # click a button and a spectrum normalizes
        self.frq_corr.configure(command=self.frequency_correct)  # click a button and a spectrum corrects for Frequency

        self.x_ch_btn.configure(command=self.x_channel_btn_clicked)  # click a x channel and plot/nuplot x channel
        self.y_ch_btn.configure(command=self.y_channel_btn_clicked)  # -"- y channel

        # ---------------------------- adding plotter to the panel on the right: --------------------------------
        self.plt0 = Plotter.Plotter(self.Viewer_Frame)  # a plotter is created in the frame
        self.plt0.set_title("...")

    def onTreeClicked(self,event): # when you click on tree view, a spectrum is selected. This is our self.spectrum_A
        print('clack!')
        item = self.tree.identify('item', event.x, event.y)
        print("you clicked on", self.tree.item(item,"text"))
        # print("you clicked on", tree.item(item))
        self.cur_index = self.tree.index(item) # cur_index is used to feel which dataset to be plotted
        self.spectrum_A = self.ds[self.cur_index] # that might be smart to do so we dont worry about indices anymore



    def open_spectrum(self):

        from tkinter import filedialog
        file_path = filedialog.askopenfilename()
        print("opening spectrum at %s"%file_path)
        self.spectrum_A = cw_spectrum.cw_spectrum(file_path)  # create an instance of cw spectrum from file in file_path
        self.ds.append(self.spectrum_A) # add new spectrum to the sataset list. spectra are in the dataset list now

        id = self.tree.insert("", len(self.ds) - 1, text=self.spectrum_A.file_name,
                         values=(self.spectrum_A.attn, self.spectrum_A.modamp))
        self.spectrum_A.index = int(id[1:])-1 # stupid tree starts listing with 1
        self.tree.selection_set(id)
        print(id)
        print(self.ds)

        # all open spectra are in ds[] list

        self.plt0.add_plot(spectrum = self.spectrum_A) # add new axes to plotter.dax[] and plot both
        self.x_ch_btn.config(relief=tk.SUNKEN) # when you open spectrum you show both components
        self.y_ch_btn.config(relief=tk.SUNKEN) # both. and Y, too.
        print('opened spectrum with id %d' %self.spectrum_A.index)


    def x_channel_btn_clicked(self):
        print("X button is in %s"%self.x_ch_btn['relief'])
        stateofbutton = self.x_ch_btn['relief']
        # which spectrum is selected in the tree view? - self.cw_spectrum. we dont care about the index

        if stateofbutton == 'sunken': # if ch x was active before:
            self.x_ch_btn.config(relief=tk.RAISED)  # deactivate btn
            # and deactivate channel
            self.plt0.set_visibility_of_selected_spectrum_compon(spectrum=self.spectrum_A, component='x', show=False)

        else:
            if stateofbutton == 'raised': # if ch x was not active before:
                self.x_ch_btn.config(relief=tk.SUNKEN)  # x channel now active. showing it:
                self.plt0.set_visibility_of_selected_spectrum_compon(spectrum=self.spectrum_A, component='x', show=True)

    def y_channel_btn_clicked(self):
        print("Y button is in %s"%self.y_ch_btn['relief'])
        stateofbutton = self.y_ch_btn['relief']
        if stateofbutton == 'sunken':
            self.y_ch_btn.config(relief=tk.RAISED)  # both. and Y, too.
            print('hiding y component')
            self.plt0.set_visibility_of_selected_spectrum_compon(spectrum=self.spectrum_A, component='y', show=False)

        else:
            if stateofbutton == 'raised':
                self.y_ch_btn.config(relief=tk.SUNKEN)  # both. and Y, too.
                print('showing y component')
                self.plt0.set_visibility_of_selected_spectrum_compon(spectrum=self.spectrum_A, component='y', show=True)

    def normalize(self):
        # normalize the current selected spectrum
        spectrum = self.ds[self.cur_index]  # chosen spectrum
        spectrum.normalize()
        #self.plt0.plot_data(self.spectrum_A.x_channel,self.spectrum_A.y_channel,'')
        self.plt0.replot_axes(spectrum = spectrum)

    def frequency_correct(self):
        spectrum = self.ds[self.cur_index]  # chosen spectrum
        spectrum.correct_for_frequency()
        #self.plt0.plot_data(self.spectrum_A.x_channel,self.spectrum_A.y_channel,'')
        self.plt0.replot_axes(spectrum = spectrum)


if __name__ == '__main__':
    start_plotter_gui()