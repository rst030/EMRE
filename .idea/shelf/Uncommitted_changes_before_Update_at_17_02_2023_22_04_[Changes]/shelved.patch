Index: venv/bin/Activate.ps1
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><#\r\n.Synopsis\r\nActivate a Python virtual environment for the current Powershell session.\r\n\r\n.Description\r\nPushes the python executable for a virtual environment to the front of the\r\n$Env:PATH environment variable and sets the prompt to signify that you are\r\nin a Python virtual environment. Makes use of the command line switches as\r\nwell as the `pyvenv.cfg` file values present in the virtual environment.\r\n\r\n.Parameter VenvDir\r\nPath to the directory that contains the virtual environment to activate. The\r\ndefault value for this is the parent of the directory that the Activate.ps1\r\nscript is located within.\r\n\r\n.Parameter Prompt\r\nThe prompt prefix to display when this virtual environment is activated. By\r\ndefault, this prompt is the name of the virtual environment folder (VenvDir)\r\nsurrounded by parentheses and followed by a single space (ie. '(.venv) ').\r\n\r\n.Example\r\nActivate.ps1\r\nActivates the Python virtual environment that contains the Activate.ps1 script.\r\n\r\n.Example\r\nActivate.ps1 -Verbose\r\nActivates the Python virtual environment that contains the Activate.ps1 script,\r\nand shows extra information about the activation as it executes.\r\n\r\n.Example\r\nActivate.ps1 -VenvDir C:\\Users\\MyUser\\Common\\.venv\r\nActivates the Python virtual environment located in the specified location.\r\n\r\n.Example\r\nActivate.ps1 -Prompt \"MyPython\"\r\nActivates the Python virtual environment that contains the Activate.ps1 script,\r\nand prefixes the current prompt with the specified string (surrounded in\r\nparentheses) while the virtual environment is active.\r\n\r\n\r\n#>\r\nParam(\r\n    [Parameter(Mandatory = $false)]\r\n    [String]\r\n    $VenvDir,\r\n    [Parameter(Mandatory = $false)]\r\n    [String]\r\n    $Prompt\r\n)\r\n\r\n<# Function declarations --------------------------------------------------- #>\r\n\r\n<#\r\n.Synopsis\r\nRemove all shell session elements added by the Activate script, including the\r\naddition of the virtual environment's Python executable from the beginning of\r\nthe PATH variable.\r\n\r\n.Parameter NonDestructive\r\nIf present, do not remove this function from the global namespace for the\r\nsession.\r\n\r\n#>\r\nfunction global:deactivate ([switch]$NonDestructive) {\r\n    # Revert to original values\r\n\r\n    # The prior prompt:\r\n    if (Test-Path -Path Function:_OLD_VIRTUAL_PROMPT) {\r\n        Copy-Item -Path Function:_OLD_VIRTUAL_PROMPT -Destination Function:prompt\r\n        Remove-Item -Path Function:_OLD_VIRTUAL_PROMPT\r\n    }\r\n\r\n    # The prior PYTHONHOME:\r\n    if (Test-Path -Path Env:_OLD_VIRTUAL_PYTHONHOME) {\r\n        Copy-Item -Path Env:_OLD_VIRTUAL_PYTHONHOME -Destination Env:PYTHONHOME\r\n        Remove-Item -Path Env:_OLD_VIRTUAL_PYTHONHOME\r\n    }\r\n\r\n    # The prior PATH:\r\n    if (Test-Path -Path Env:_OLD_VIRTUAL_PATH) {\r\n        Copy-Item -Path Env:_OLD_VIRTUAL_PATH -Destination Env:PATH\r\n        Remove-Item -Path Env:_OLD_VIRTUAL_PATH\r\n    }\r\n\r\n    # Just remove the VIRTUAL_ENV altogether:\r\n    if (Test-Path -Path Env:VIRTUAL_ENV) {\r\n        Remove-Item -Path env:VIRTUAL_ENV\r\n    }\r\n\r\n    # Just remove the _PYTHON_VENV_PROMPT_PREFIX altogether:\r\n    if (Get-Variable -Name \"_PYTHON_VENV_PROMPT_PREFIX\" -ErrorAction SilentlyContinue) {\r\n        Remove-Variable -Name _PYTHON_VENV_PROMPT_PREFIX -Scope Global -Force\r\n    }\r\n\r\n    # Leave deactivate function in the global namespace if requested:\r\n    if (-not $NonDestructive) {\r\n        Remove-Item -Path function:deactivate\r\n    }\r\n}\r\n\r\n<#\r\n.Description\r\nGet-PyVenvConfig parses the values from the pyvenv.cfg file located in the\r\ngiven folder, and returns them in a map.\r\n\r\nFor each line in the pyvenv.cfg file, if that line can be parsed into exactly\r\ntwo strings separated by `=` (with any amount of whitespace surrounding the =)\r\nthen it is considered a `key = value` line. The left hand string is the key,\r\nthe right hand is the value.\r\n\r\nIf the value starts with a `'` or a `\"` then the first and last character is\r\nstripped from the value before being captured.\r\n\r\n.Parameter ConfigDir\r\nPath to the directory that contains the `pyvenv.cfg` file.\r\n#>\r\nfunction Get-PyVenvConfig(\r\n    [String]\r\n    $ConfigDir\r\n) {\r\n    Write-Verbose \"Given ConfigDir=$ConfigDir, obtain values in pyvenv.cfg\"\r\n\r\n    # Ensure the file exists, and issue a warning if it doesn't (but still allow the function to continue).\r\n    $pyvenvConfigPath = Join-Path -Resolve -Path $ConfigDir -ChildPath 'pyvenv.cfg' -ErrorAction Continue\r\n\r\n    # An empty map will be returned if no config file is found.\r\n    $pyvenvConfig = @{ }\r\n\r\n    if ($pyvenvConfigPath) {\r\n\r\n        Write-Verbose \"File exists, parse `key = value` lines\"\r\n        $pyvenvConfigContent = Get-Content -Path $pyvenvConfigPath\r\n\r\n        $pyvenvConfigContent | ForEach-Object {\r\n            $keyval = $PSItem -split \"\\s*=\\s*\", 2\r\n            if ($keyval[0] -and $keyval[1]) {\r\n                $val = $keyval[1]\r\n\r\n                # Remove extraneous quotations around a string value.\r\n                if (\"'\"\"\".Contains($val.Substring(0,1))) {\r\n                    $val = $val.Substring(1, $val.Length - 2)\r\n                }\r\n\r\n                $pyvenvConfig[$keyval[0]] = $val\r\n                Write-Verbose \"Adding Key: '$($keyval[0])'='$val'\"\r\n            }\r\n        }\r\n    }\r\n    return $pyvenvConfig\r\n}\r\n\r\n\r\n<# Begin Activate script --------------------------------------------------- #>\r\n\r\n# Determine the containing directory of this script\r\n$VenvExecPath = Split-Path -Parent $MyInvocation.MyCommand.Definition\r\n$VenvExecDir = Get-Item -Path $VenvExecPath\r\n\r\nWrite-Verbose \"Activation script is located in path: '$VenvExecPath'\"\r\nWrite-Verbose \"VenvExecDir Fullname: '$($VenvExecDir.FullName)\"\r\nWrite-Verbose \"VenvExecDir Name: '$($VenvExecDir.Name)\"\r\n\r\n# Set values required in priority: CmdLine, ConfigFile, Default\r\n# First, get the location of the virtual environment, it might not be\r\n# VenvExecDir if specified on the command line.\r\nif ($VenvDir) {\r\n    Write-Verbose \"VenvDir given as parameter, using '$VenvDir' to determine values\"\r\n} else {\r\n    Write-Verbose \"VenvDir not given as a parameter, using parent directory name as VenvDir.\"\r\n    $VenvDir = $VenvExecDir.Parent.FullName.TrimEnd(\"\\\\/\")\r\n    Write-Verbose \"VenvDir=$VenvDir\"\r\n}\r\n\r\n# Next, read the `pyvenv.cfg` file to determine any required value such\r\n# as `prompt`.\r\n$pyvenvCfg = Get-PyVenvConfig -ConfigDir $VenvDir\r\n\r\n# Next, set the prompt from the command line, or the config file, or\r\n# just use the name of the virtual environment folder.\r\nif ($Prompt) {\r\n    Write-Verbose \"Prompt specified as argument, using '$Prompt'\"\r\n} else {\r\n    Write-Verbose \"Prompt not specified as argument to script, checking pyvenv.cfg value\"\r\n    if ($pyvenvCfg -and $pyvenvCfg['prompt']) {\r\n        Write-Verbose \"  Setting based on value in pyvenv.cfg='$($pyvenvCfg['prompt'])'\"\r\n        $Prompt = $pyvenvCfg['prompt'];\r\n    }\r\n    else {\r\n        Write-Verbose \"  Setting prompt based on parent's directory's name. (Is the directory name passed to venv module when creating the virutal environment)\"\r\n        Write-Verbose \"  Got leaf-name of $VenvDir='$(Split-Path -Path $venvDir -Leaf)'\"\r\n        $Prompt = Split-Path -Path $venvDir -Leaf\r\n    }\r\n}\r\n\r\nWrite-Verbose \"Prompt = '$Prompt'\"\r\nWrite-Verbose \"VenvDir='$VenvDir'\"\r\n\r\n# Deactivate any currently active virtual environment, but leave the\r\n# deactivate function in place.\r\ndeactivate -nondestructive\r\n\r\n# Now set the environment variable VIRTUAL_ENV, used by many tools to determine\r\n# that there is an activated venv.\r\n$env:VIRTUAL_ENV = $VenvDir\r\n\r\nif (-not $Env:VIRTUAL_ENV_DISABLE_PROMPT) {\r\n\r\n    Write-Verbose \"Setting prompt to '$Prompt'\"\r\n\r\n    # Set the prompt to include the env name\r\n    # Make sure _OLD_VIRTUAL_PROMPT is global\r\n    function global:_OLD_VIRTUAL_PROMPT { \"\" }\r\n    Copy-Item -Path function:prompt -Destination function:_OLD_VIRTUAL_PROMPT\r\n    New-Variable -Name _PYTHON_VENV_PROMPT_PREFIX -Description \"Python virtual environment prompt prefix\" -Scope Global -Option ReadOnly -Visibility Public -Value $Prompt\r\n\r\n    function global:prompt {\r\n        Write-Host -NoNewline -ForegroundColor Green \"($_PYTHON_VENV_PROMPT_PREFIX) \"\r\n        _OLD_VIRTUAL_PROMPT\r\n    }\r\n}\r\n\r\n# Clear PYTHONHOME\r\nif (Test-Path -Path Env:PYTHONHOME) {\r\n    Copy-Item -Path Env:PYTHONHOME -Destination Env:_OLD_VIRTUAL_PYTHONHOME\r\n    Remove-Item -Path Env:PYTHONHOME\r\n}\r\n\r\n# Add the venv to the PATH\r\nCopy-Item -Path Env:PATH -Destination Env:_OLD_VIRTUAL_PATH\r\n$Env:PATH = \"$VenvExecDir$([System.IO.Path]::PathSeparator)$Env:PATH\"\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/venv/bin/Activate.ps1 b/venv/bin/Activate.ps1
--- a/venv/bin/Activate.ps1	(revision d7e9842044e4a725dc7e6060d58dcd1429fc4b2d)
+++ b/venv/bin/Activate.ps1	(date 1676667782679)
@@ -1,230 +1,60 @@
-<#
-.Synopsis
-Activate a Python virtual environment for the current Powershell session.
-
-.Description
-Pushes the python executable for a virtual environment to the front of the
-$Env:PATH environment variable and sets the prompt to signify that you are
-in a Python virtual environment. Makes use of the command line switches as
-well as the `pyvenv.cfg` file values present in the virtual environment.
-
-.Parameter VenvDir
-Path to the directory that contains the virtual environment to activate. The
-default value for this is the parent of the directory that the Activate.ps1
-script is located within.
-
-.Parameter Prompt
-The prompt prefix to display when this virtual environment is activated. By
-default, this prompt is the name of the virtual environment folder (VenvDir)
-surrounded by parentheses and followed by a single space (ie. '(.venv) ').
-
-.Example
-Activate.ps1
-Activates the Python virtual environment that contains the Activate.ps1 script.
-
-.Example
-Activate.ps1 -Verbose
-Activates the Python virtual environment that contains the Activate.ps1 script,
-and shows extra information about the activation as it executes.
-
-.Example
-Activate.ps1 -VenvDir C:\Users\MyUser\Common\.venv
-Activates the Python virtual environment located in the specified location.
-
-.Example
-Activate.ps1 -Prompt "MyPython"
-Activates the Python virtual environment that contains the Activate.ps1 script,
-and prefixes the current prompt with the specified string (surrounded in
-parentheses) while the virtual environment is active.
-
-
-#>
-Param(
-    [Parameter(Mandatory = $false)]
-    [String]
-    $VenvDir,
-    [Parameter(Mandatory = $false)]
-    [String]
-    $Prompt
-)
-
-<# Function declarations --------------------------------------------------- #>
+$script:THIS_PATH = $myinvocation.mycommand.path
+$script:BASE_DIR = Split-Path (Resolve-Path "$THIS_PATH/..") -Parent
 
-<#
-.Synopsis
-Remove all shell session elements added by the Activate script, including the
-addition of the virtual environment's Python executable from the beginning of
-the PATH variable.
-
-.Parameter NonDestructive
-If present, do not remove this function from the global namespace for the
-session.
-
-#>
-function global:deactivate ([switch]$NonDestructive) {
-    # Revert to original values
-
-    # The prior prompt:
-    if (Test-Path -Path Function:_OLD_VIRTUAL_PROMPT) {
-        Copy-Item -Path Function:_OLD_VIRTUAL_PROMPT -Destination Function:prompt
-        Remove-Item -Path Function:_OLD_VIRTUAL_PROMPT
+function global:deactivate([switch] $NonDestructive) {
+    if (Test-Path variable:_OLD_VIRTUAL_PATH) {
+        $env:PATH = $variable:_OLD_VIRTUAL_PATH
+        Remove-Variable "_OLD_VIRTUAL_PATH" -Scope global
     }
 
-    # The prior PYTHONHOME:
-    if (Test-Path -Path Env:_OLD_VIRTUAL_PYTHONHOME) {
-        Copy-Item -Path Env:_OLD_VIRTUAL_PYTHONHOME -Destination Env:PYTHONHOME
-        Remove-Item -Path Env:_OLD_VIRTUAL_PYTHONHOME
+    if (Test-Path function:_old_virtual_prompt) {
+        $function:prompt = $function:_old_virtual_prompt
+        Remove-Item function:\_old_virtual_prompt
     }
 
-    # The prior PATH:
-    if (Test-Path -Path Env:_OLD_VIRTUAL_PATH) {
-        Copy-Item -Path Env:_OLD_VIRTUAL_PATH -Destination Env:PATH
-        Remove-Item -Path Env:_OLD_VIRTUAL_PATH
+    if ($env:VIRTUAL_ENV) {
+        Remove-Item env:VIRTUAL_ENV -ErrorAction SilentlyContinue
     }
 
-    # Just remove the VIRTUAL_ENV altogether:
-    if (Test-Path -Path Env:VIRTUAL_ENV) {
-        Remove-Item -Path env:VIRTUAL_ENV
+    if (!$NonDestructive) {
+        # Self destruct!
+        Remove-Item function:deactivate
+        Remove-Item function:pydoc
     }
-
-    # Just remove the _PYTHON_VENV_PROMPT_PREFIX altogether:
-    if (Get-Variable -Name "_PYTHON_VENV_PROMPT_PREFIX" -ErrorAction SilentlyContinue) {
-        Remove-Variable -Name _PYTHON_VENV_PROMPT_PREFIX -Scope Global -Force
-    }
+}
 
-    # Leave deactivate function in the global namespace if requested:
-    if (-not $NonDestructive) {
-        Remove-Item -Path function:deactivate
-    }
+function global:pydoc {
+    python -m pydoc $args
 }
-
-<#
-.Description
-Get-PyVenvConfig parses the values from the pyvenv.cfg file located in the
-given folder, and returns them in a map.
-
-For each line in the pyvenv.cfg file, if that line can be parsed into exactly
-two strings separated by `=` (with any amount of whitespace surrounding the =)
-then it is considered a `key = value` line. The left hand string is the key,
-the right hand is the value.
-
-If the value starts with a `'` or a `"` then the first and last character is
-stripped from the value before being captured.
-
-.Parameter ConfigDir
-Path to the directory that contains the `pyvenv.cfg` file.
-#>
-function Get-PyVenvConfig(
-    [String]
-    $ConfigDir
-) {
-    Write-Verbose "Given ConfigDir=$ConfigDir, obtain values in pyvenv.cfg"
-
-    # Ensure the file exists, and issue a warning if it doesn't (but still allow the function to continue).
-    $pyvenvConfigPath = Join-Path -Resolve -Path $ConfigDir -ChildPath 'pyvenv.cfg' -ErrorAction Continue
-
-    # An empty map will be returned if no config file is found.
-    $pyvenvConfig = @{ }
-
-    if ($pyvenvConfigPath) {
 
-        Write-Verbose "File exists, parse `key = value` lines"
-        $pyvenvConfigContent = Get-Content -Path $pyvenvConfigPath
+# unset irrelevant variables
+deactivate -nondestructive
 
-        $pyvenvConfigContent | ForEach-Object {
-            $keyval = $PSItem -split "\s*=\s*", 2
-            if ($keyval[0] -and $keyval[1]) {
-                $val = $keyval[1]
+$VIRTUAL_ENV = $BASE_DIR
+$env:VIRTUAL_ENV = $VIRTUAL_ENV
 
-                # Remove extraneous quotations around a string value.
-                if ("'""".Contains($val.Substring(0,1))) {
-                    $val = $val.Substring(1, $val.Length - 2)
-                }
+New-Variable -Scope global -Name _OLD_VIRTUAL_PATH -Value $env:PATH
 
-                $pyvenvConfig[$keyval[0]] = $val
-                Write-Verbose "Adding Key: '$($keyval[0])'='$val'"
-            }
-        }
+$env:PATH = "$env:VIRTUAL_ENV/bin:" + $env:PATH
+if (!$env:VIRTUAL_ENV_DISABLE_PROMPT) {
+    function global:_old_virtual_prompt {
+        ""
     }
-    return $pyvenvConfig
-}
-
-
-<# Begin Activate script --------------------------------------------------- #>
+    $function:_old_virtual_prompt = $function:prompt
 
-# Determine the containing directory of this script
-$VenvExecPath = Split-Path -Parent $MyInvocation.MyCommand.Definition
-$VenvExecDir = Get-Item -Path $VenvExecPath
-
-Write-Verbose "Activation script is located in path: '$VenvExecPath'"
-Write-Verbose "VenvExecDir Fullname: '$($VenvExecDir.FullName)"
-Write-Verbose "VenvExecDir Name: '$($VenvExecDir.Name)"
-
-# Set values required in priority: CmdLine, ConfigFile, Default
-# First, get the location of the virtual environment, it might not be
-# VenvExecDir if specified on the command line.
-if ($VenvDir) {
-    Write-Verbose "VenvDir given as parameter, using '$VenvDir' to determine values"
-} else {
-    Write-Verbose "VenvDir not given as a parameter, using parent directory name as VenvDir."
-    $VenvDir = $VenvExecDir.Parent.FullName.TrimEnd("\\/")
-    Write-Verbose "VenvDir=$VenvDir"
-}
-
-# Next, read the `pyvenv.cfg` file to determine any required value such
-# as `prompt`.
-$pyvenvCfg = Get-PyVenvConfig -ConfigDir $VenvDir
-
-# Next, set the prompt from the command line, or the config file, or
-# just use the name of the virtual environment folder.
-if ($Prompt) {
-    Write-Verbose "Prompt specified as argument, using '$Prompt'"
-} else {
-    Write-Verbose "Prompt not specified as argument to script, checking pyvenv.cfg value"
-    if ($pyvenvCfg -and $pyvenvCfg['prompt']) {
-        Write-Verbose "  Setting based on value in pyvenv.cfg='$($pyvenvCfg['prompt'])'"
-        $Prompt = $pyvenvCfg['prompt'];
+    if ("" -ne "") {
+        function global:prompt {
+            # Add the custom prefix to the existing prompt
+            $previous_prompt_value = & $function:_old_virtual_prompt
+            ("" + $previous_prompt_value)
+        }
     }
     else {
-        Write-Verbose "  Setting prompt based on parent's directory's name. (Is the directory name passed to venv module when creating the virutal environment)"
-        Write-Verbose "  Got leaf-name of $VenvDir='$(Split-Path -Path $venvDir -Leaf)'"
-        $Prompt = Split-Path -Path $venvDir -Leaf
-    }
-}
-
-Write-Verbose "Prompt = '$Prompt'"
-Write-Verbose "VenvDir='$VenvDir'"
-
-# Deactivate any currently active virtual environment, but leave the
-# deactivate function in place.
-deactivate -nondestructive
-
-# Now set the environment variable VIRTUAL_ENV, used by many tools to determine
-# that there is an activated venv.
-$env:VIRTUAL_ENV = $VenvDir
-
-if (-not $Env:VIRTUAL_ENV_DISABLE_PROMPT) {
-
-    Write-Verbose "Setting prompt to '$Prompt'"
-
-    # Set the prompt to include the env name
-    # Make sure _OLD_VIRTUAL_PROMPT is global
-    function global:_OLD_VIRTUAL_PROMPT { "" }
-    Copy-Item -Path function:prompt -Destination function:_OLD_VIRTUAL_PROMPT
-    New-Variable -Name _PYTHON_VENV_PROMPT_PREFIX -Description "Python virtual environment prompt prefix" -Scope Global -Option ReadOnly -Visibility Public -Value $Prompt
-
-    function global:prompt {
-        Write-Host -NoNewline -ForegroundColor Green "($_PYTHON_VENV_PROMPT_PREFIX) "
-        _OLD_VIRTUAL_PROMPT
-    }
-}
-
-# Clear PYTHONHOME
-if (Test-Path -Path Env:PYTHONHOME) {
-    Copy-Item -Path Env:PYTHONHOME -Destination Env:_OLD_VIRTUAL_PYTHONHOME
-    Remove-Item -Path Env:PYTHONHOME
+        function global:prompt {
+            # Add a prefix to the current prompt, but don't discard it.
+            $previous_prompt_value = & $function:_old_virtual_prompt
+            $new_prompt_value = "($( Split-Path $env:VIRTUAL_ENV -Leaf )) "
+            ($new_prompt_value + $previous_prompt_value)
+        }
+    }
 }
-
-# Add the venv to the PATH
-Copy-Item -Path Env:PATH -Destination Env:_OLD_VIRTUAL_PATH
-$Env:PATH = "$VenvExecDir$([System.IO.Path]::PathSeparator)$Env:PATH"
