"""this is a class. it is a scan class.
It has a field called gui that is a tinter gui that shows up.
other fields are the same as in cw_spectrum.py!"""

#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.26
#  in conjunction with Tcl version 8.6
#    Oct 19, 2020 08:52:47 PM CEST  platform: Windows NT
#        Ilia Kulikov ilia.kulikov@fu-berlin.de

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True



import cw_spectrum # you want to import parameters from cw spectra. For that a cw_spectrum is created

END = tk.END  # convenient variable for configuring entries


class Scan_setup:

    file_path = ""     # file path with data
    spectrum_file = 0  # spectrum file for importing parameters from

    twochannels = False # recorded two channels?
    gaussmeter = False  # gaussmeter used?
    date = 0          # date of experiment
    time = 0          # time of experiment
    bstart = 3200        # start value of magnetic field
    bstop = 3400         # upper limit of magnetic field
    bstep = 0.1         # step of magnetic field

    modamp = 1        # modulation amplitude. This Must be in gauss!
    modamp_dim = 'V\n'  # V or G

    modampingauss = True   # for the time being
    modfreq = 100000       # modulation frequency in Hz
    li_tc = 1e-3           # LIA TC [s]
    li_level = 0           # LIA level [V] that is calculated from the reauired modamp that is given in G
    li_phase = 338.0       # LIA phase [deg] 338 deg for 100 kHz and 291 [deg] for 10 kHz default state in gui: auto

    li_sens = 1e-3         # LIA sensitivity [V]

    conv_time = 3          # conversion time, TCs
    mwfreq = 9.6           # MW frequency, GHz
    attn = 22              # Attenuation, dB
    temp = 295             # Temperature, K
    sample = ""
    comment = ""
    file_name = ""     # file name, not the full path


    bstart_meas = 0
    bstop_meas = 0     # magnetic fields measured with gaussmeter
    nruns = 1          # number of scans
    npoints = round(bstop - bstart)/bstep        # number of magnetic field points

    # ------------ Electrochemistry ---------------
    echem_low = 0         # lowest echem potetial
    echem_high = 1000     # highest echem potential
    echem_nsteps = 2      # how many potentials
    echem_stay_high = 1   # 1 cycle for staying high
    echem_go_low = 0      # 0 cycles for going low for recovery between potentials
    # ---------------------------------------------


    gui = tk.Tk # this is the window, to be created when the class is initialized.

    scan_set = False # by default scan not set



    def __init__(self): # this Toplevel is based upon a certain window that must be its root
        # parameter labels and so on are fed to this module in order to be able to run experiments
        top = tk.Tk()
        top.withdraw()
        top.protocol("WM_DELETE_WINDOW", self.close_setting_window)
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("899x778+424+158")
        top.minsize(116, 1)
        top.maxsize(3282, 1174)
        top.resizable(1, 1)
        top.title("Scan Parameters")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.load_btn = tk.Button(top)
        self.load_btn.place(relx=0.011, rely=0.039, height=34, width=129)
        self.load_btn.configure(activebackground="#ececec")
        self.load_btn.configure(activeforeground="#000000")
        self.load_btn.configure(background="#d9d9d9")
        self.load_btn.configure(disabledforeground="#a3a3a3")
        self.load_btn.configure(font="-family {Segoe UI} -size 12")
        self.load_btn.configure(foreground="#000000")
        self.load_btn.configure(highlightbackground="#d9d9d9")
        self.load_btn.configure(highlightcolor="black")
        self.load_btn.configure(pady="0")
        self.load_btn.configure(text='''Load From File''')

        self.Labelframe1 = tk.LabelFrame(top)
        self.Labelframe1.place(relx=0.011, rely=0.125, relheight=0.337
                , relwidth=0.323)
        self.Labelframe1.configure(relief='groove')
        self.Labelframe1.configure(font="-family {Arial} -size 12 -weight bold")
        self.Labelframe1.configure(foreground="black")
        self.Labelframe1.configure(text='''Scan''')
        self.Labelframe1.configure(background="#d9d9d9")
        self.Labelframe1.configure(highlightbackground="#d9d9d9")
        self.Labelframe1.configure(highlightcolor="black")

        self.TLabel4_5 = ttk.Label(self.Labelframe1)
        self.TLabel4_5.place(relx=0.034, rely=0.115, height=25, width=48
                , bordermode='ignore')
        self.TLabel4_5.configure(background="#d9d9d9")
        self.TLabel4_5.configure(foreground="#000000")
        self.TLabel4_5.configure(font="-family {Segoe UI} -size 12")
        self.TLabel4_5.configure(relief="flat")
        self.TLabel4_5.configure(text='''B start''')

        self.B_start_etry = tk.Entry(self.Labelframe1)
        self.B_start_etry.place(relx=0.234, rely=0.13, height=20, relwidth=0.29
                , bordermode='ignore')
        self.B_start_etry.configure(background="white")
        self.B_start_etry.configure(disabledforeground="#a3a3a3")
        self.B_start_etry.configure(font="-family {Arial} -size 12")
        self.B_start_etry.configure(foreground="#000000")
        self.B_start_etry.configure(highlightbackground="#d9d9d9")
        self.B_start_etry.configure(highlightcolor="black")
        self.B_start_etry.configure(insertbackground="black")
        self.B_start_etry.configure(selectbackground="#c4c4c4")
        self.B_start_etry.configure(selectforeground="black")

        self.Label1_7 = tk.Label(self.Labelframe1)
        self.Label1_7.place(relx=0.552, rely=0.122, height=24, width=18
                , bordermode='ignore')
        self.Label1_7.configure(activebackground="#f9f9f9")
        self.Label1_7.configure(activeforeground="black")
        self.Label1_7.configure(background="#d9d9d9")
        self.Label1_7.configure(disabledforeground="#a3a3a3")
        self.Label1_7.configure(font="-family {Arial} -size 12")
        self.Label1_7.configure(foreground="#000000")
        self.Label1_7.configure(highlightbackground="#d9d9d9")
        self.Label1_7.configure(highlightcolor="black")
        self.Label1_7.configure(text='''G''')

        self.TLabel5_8 = ttk.Label(self.Labelframe1)
        self.TLabel5_8.place(relx=0.034, rely=0.206, height=25, width=47
                , bordermode='ignore')
        self.TLabel5_8.configure(background="#d9d9d9")
        self.TLabel5_8.configure(foreground="#000000")
        self.TLabel5_8.configure(font="-family {Segoe UI} -size 12")
        self.TLabel5_8.configure(relief="flat")
        self.TLabel5_8.configure(text='''B stop''')

        self.B_stop_etry = tk.Entry(self.Labelframe1)
        self.B_stop_etry.place(relx=0.234, rely=0.221, height=20, relwidth=0.29
                , bordermode='ignore')
        self.B_stop_etry.configure(background="white")
        self.B_stop_etry.configure(disabledforeground="#a3a3a3")
        self.B_stop_etry.configure(font="-family {Arial} -size 12")
        self.B_stop_etry.configure(foreground="#000000")
        self.B_stop_etry.configure(highlightbackground="#d9d9d9")
        self.B_stop_etry.configure(highlightcolor="black")
        self.B_stop_etry.configure(insertbackground="black")
        self.B_stop_etry.configure(selectbackground="#c4c4c4")
        self.B_stop_etry.configure(selectforeground="black")

        self.Label1_3 = tk.Label(self.Labelframe1)
        self.Label1_3.place(relx=0.552, rely=0.218, height=24, width=18
                , bordermode='ignore')
        self.Label1_3.configure(activebackground="#f9f9f9")
        self.Label1_3.configure(activeforeground="black")
        self.Label1_3.configure(background="#d9d9d9")
        self.Label1_3.configure(disabledforeground="#a3a3a3")
        self.Label1_3.configure(font="-family {Arial} -size 12")
        self.Label1_3.configure(foreground="#000000")
        self.Label1_3.configure(highlightbackground="#d9d9d9")
        self.Label1_3.configure(highlightcolor="black")
        self.Label1_3.configure(text='''G''')

        self.TLabel6_4 = ttk.Label(self.Labelframe1)
        self.TLabel6_4.place(relx=0.034, rely=0.298, height=25, width=46
                , bordermode='ignore')
        self.TLabel6_4.configure(background="#d9d9d9")
        self.TLabel6_4.configure(foreground="#000000")
        self.TLabel6_4.configure(font="-family {Segoe UI} -size 12")
        self.TLabel6_4.configure(relief="flat")
        self.TLabel6_4.configure(text='''B step''')

        self.B_step_etry = tk.Entry(self.Labelframe1)
        self.B_step_etry.place(relx=0.234, rely=0.313, height=20, relwidth=0.29
                , bordermode='ignore')
        self.B_step_etry.configure(background="white")
        self.B_step_etry.configure(disabledforeground="#a3a3a3")
        self.B_step_etry.configure(font="-family {Arial} -size 12")
        self.B_step_etry.configure(foreground="#000000")
        self.B_step_etry.configure(highlightbackground="#d9d9d9")
        self.B_step_etry.configure(highlightcolor="black")
        self.B_step_etry.configure(insertbackground="black")
        self.B_step_etry.configure(selectbackground="#c4c4c4")
        self.B_step_etry.configure(selectforeground="black")

        self.Label1_2 = tk.Label(self.Labelframe1)
        self.Label1_2.place(relx=0.552, rely=0.309, height=24, width=18
                , bordermode='ignore')
        self.Label1_2.configure(activebackground="#f9f9f9")
        self.Label1_2.configure(activeforeground="black")
        self.Label1_2.configure(background="#d9d9d9")
        self.Label1_2.configure(disabledforeground="#a3a3a3")
        self.Label1_2.configure(font="-family {Arial} -size 12")
        self.Label1_2.configure(foreground="#000000")
        self.Label1_2.configure(highlightbackground="#d9d9d9")
        self.Label1_2.configure(highlightcolor="black")
        self.Label1_2.configure(text='''G''')

        self.Gaussmeter_checkbutton = tk.Checkbutton(self.Labelframe1)
        self.Gaussmeter_checkbutton.place(relx=0.097, rely=0.439, relheight=0.095
                , relwidth=0.417, bordermode='ignore')
        self.Gaussmeter_checkbutton.configure(activebackground="#ececec")
        self.Gaussmeter_checkbutton.configure(activeforeground="#000000")
        self.Gaussmeter_checkbutton.configure(background="#d9d9d9")
        self.Gaussmeter_checkbutton.configure(disabledforeground="#a3a3a3")
        self.Gaussmeter_checkbutton.configure(font="-family {Arial} -size 12")
        self.Gaussmeter_checkbutton.configure(foreground="#000000")
        self.Gaussmeter_checkbutton.configure(highlightbackground="#d9d9d9")
        self.Gaussmeter_checkbutton.configure(highlightcolor="black")
        self.Gaussmeter_checkbutton.configure(justify='left')
        self.Gaussmeter_checkbutton.configure(text='''Gaussmeter''')

        self.TLabel8_4 = ttk.Label(self.Labelframe1)
        self.TLabel8_4.place(relx=0.034, rely=0.573, height=25, width=77
                , bordermode='ignore')
        self.TLabel8_4.configure(background="#d9d9d9")
        self.TLabel8_4.configure(foreground="#000000")
        self.TLabel8_4.configure(font="-family {Segoe UI} -size 12")
        self.TLabel8_4.configure(relief="flat")
        self.TLabel8_4.configure(text='''Mod. amp.''')

        self.Mod_Amp_etry = tk.Entry(self.Labelframe1)
        self.Mod_Amp_etry.place(relx=0.307, rely=0.595, height=20, relwidth=0.221
                , bordermode='ignore')
        self.Mod_Amp_etry.configure(background="white")
        self.Mod_Amp_etry.configure(disabledforeground="#a3a3a3")
        self.Mod_Amp_etry.configure(font="-family {Arial} -size 12")
        self.Mod_Amp_etry.configure(foreground="#000000")
        self.Mod_Amp_etry.configure(highlightbackground="#d9d9d9")
        self.Mod_Amp_etry.configure(highlightcolor="black")
        self.Mod_Amp_etry.configure(insertbackground="black")
        self.Mod_Amp_etry.configure(selectbackground="#c4c4c4")
        self.Mod_Amp_etry.configure(selectforeground="black")

        self.Gauss_Volt_Combobox = ttk.Combobox(self.Labelframe1)
        self.Gauss_Volt_Combobox.place(relx=0.552, rely=0.595, relheight=0.08
                , relwidth=0.183, bordermode='ignore')
        self.Gauss_Volt_Combobox.configure(takefocus="")

        self.TLabel9_7 = ttk.Label(self.Labelframe1)
        self.TLabel9_7.place(relx=0.034, rely=0.687, height=25, width=74
                , bordermode='ignore')
        self.TLabel9_7.configure(background="#d9d9d9")
        self.TLabel9_7.configure(foreground="#000000")
        self.TLabel9_7.configure(font="-family {Segoe UI} -size 12")
        self.TLabel9_7.configure(relief="flat")
        self.TLabel9_7.configure(text='''Mod. freq.''')

        self.Mod_Freq_etry = tk.Entry(self.Labelframe1)
        self.Mod_Freq_etry.place(relx=0.307, rely=0.695, height=20
                , relwidth=0.221, bordermode='ignore')
        self.Mod_Freq_etry.configure(background="white")
        self.Mod_Freq_etry.configure(disabledforeground="#a3a3a3")
        self.Mod_Freq_etry.configure(font="-family {Arial} -size 12")
        self.Mod_Freq_etry.configure(foreground="#000000")
        self.Mod_Freq_etry.configure(highlightbackground="#d9d9d9")
        self.Mod_Freq_etry.configure(highlightcolor="black")
        self.Mod_Freq_etry.configure(insertbackground="black")
        self.Mod_Freq_etry.configure(selectbackground="#c4c4c4")
        self.Mod_Freq_etry.configure(selectforeground="black")

        self.TLabel1 = ttk.Label(self.Labelframe1)
        self.TLabel1.place(relx=0.552, rely=0.695, height=22, width=33
                , bordermode='ignore')
        self.TLabel1.configure(background="#d9d9d9")
        self.TLabel1.configure(foreground="#000000")
        self.TLabel1.configure(font="-family {Arial} -size 12")
        self.TLabel1.configure(relief="flat")
        self.TLabel1.configure(text='''KHz''')

        self.TSeparator1_6 = ttk.Separator(self.Labelframe1)
        self.TSeparator1_6.place(relx=0.038, rely=0.836, relwidth=0.931
                , bordermode='ignore')

        self.TLabel9_5 = ttk.Label(self.Labelframe1)
        self.TLabel9_5.place(relx=0.034, rely=0.863, height=25, width=74
                , bordermode='ignore')
        self.TLabel9_5.configure(background="#d9d9d9")
        self.TLabel9_5.configure(foreground="#000000")
        self.TLabel9_5.configure(font="-family {Segoe UI} -size 12")
        self.TLabel9_5.configure(relief="flat")
        self.TLabel9_5.configure(text='''# scans''')

        self.nscans_etry = tk.Entry(self.Labelframe1)
        self.nscans_etry.place(relx=0.31, rely=0.882, height=20, relwidth=0.221
                , bordermode='ignore')
        self.nscans_etry.configure(background="white")
        self.nscans_etry.configure(disabledforeground="#a3a3a3")
        self.nscans_etry.configure(font="-family {Arial} -size 12")
        self.nscans_etry.configure(foreground="#000000")
        self.nscans_etry.configure(highlightbackground="#d9d9d9")
        self.nscans_etry.configure(highlightcolor="black")
        self.nscans_etry.configure(insertbackground="black")
        self.nscans_etry.configure(selectbackground="#c4c4c4")
        self.nscans_etry.configure(selectforeground="black")

        self.Labelframe1_3 = tk.LabelFrame(top)
        self.Labelframe1_3.place(relx=0.334, rely=0.125, relheight=0.337
                , relwidth=0.334)
        self.Labelframe1_3.configure(relief='groove')
        self.Labelframe1_3.configure(font="-family {Arial} -size 12 -weight bold")
        self.Labelframe1_3.configure(foreground="black")
        self.Labelframe1_3.configure(text='''Detection''')
        self.Labelframe1_3.configure(background="#d9d9d9")
        self.Labelframe1_3.configure(highlightbackground="#d9d9d9")
        self.Labelframe1_3.configure(highlightcolor="black")

        self.TLabel10 = ttk.Label(self.Labelframe1_3)
        self.TLabel10.place(relx=0.067, rely=0.126, height=25, width=99
                , bordermode='ignore')
        self.TLabel10.configure(background="#d9d9d9")
        self.TLabel10.configure(foreground="#000000")
        self.TLabel10.configure(font="-family {Segoe UI} -size 12")
        self.TLabel10.configure(relief="flat")
        self.TLabel10.configure(text='''Sensitivity''')

        self.TLabel12 = ttk.Label(self.Labelframe1_3)
        self.TLabel12.place(relx=0.067, rely=0.324, height=25, width=118
                , bordermode='ignore')
        self.TLabel12.configure(background="#d9d9d9")
        self.TLabel12.configure(foreground="#000000")
        self.TLabel12.configure(font="-family {Segoe UI} -size 12")
        self.TLabel12.configure(relief="flat")
        self.TLabel12.configure(text='''Conversion time''')

        self.TLabel11 = ttk.Label(self.Labelframe1_3)
        self.TLabel11.place(relx=0.067, rely=0.221, height=25, width=101
                , bordermode='ignore')
        self.TLabel11.configure(background="#d9d9d9")
        self.TLabel11.configure(foreground="#000000")
        self.TLabel11.configure(font="-family {Segoe UI} -size 12")
        self.TLabel11.configure(relief="flat")
        self.TLabel11.configure(text='''Time constant''')

        self.TLabel13 = ttk.Label(self.Labelframe1_3)
        self.TLabel13.place(relx=0.067, rely=0.427, height=25, width=71
                , bordermode='ignore')
        self.TLabel13.configure(background="#d9d9d9")
        self.TLabel13.configure(foreground="#000000")
        self.TLabel13.configure(font="-family {Segoe UI} -size 12")
        self.TLabel13.configure(relief="flat")
        self.TLabel13.configure(text='''Phase''')

        self.TLabel15 = ttk.Label(self.Labelframe1_3)
        self.TLabel15.place(relx=0.067, rely=0.641, height=25, width=75
                , bordermode='ignore')
        self.TLabel15.configure(background="#d9d9d9")
        self.TLabel15.configure(foreground="#000000")
        self.TLabel15.configure(font="-family {Segoe UI} -size 12")
        self.TLabel15.configure(relief="flat")
        self.TLabel15.configure(text='''MW atten.''')

        self.LIA_sens_combobox = ttk.Combobox(self.Labelframe1_3)
        self.LIA_sens_combobox.place(relx=0.5, rely=0.13, relheight=0.08
                , relwidth=0.377, bordermode='ignore')
        self.LIA_sens_combobox.configure(takefocus="")

        self.TC_combobox = ttk.Combobox(self.Labelframe1_3)
        self.TC_combobox.place(relx=0.5, rely=0.229, relheight=0.08
                , relwidth=0.377, bordermode='ignore')
        self.TC_combobox.configure(takefocus="")

        self.LIA_conv_time_combobox = ttk.Combobox(self.Labelframe1_3)
        self.LIA_conv_time_combobox.place(relx=0.5, rely=0.328, relheight=0.08
                , relwidth=0.377, bordermode='ignore')
        self.LIA_conv_time_combobox.configure(takefocus="")

        self.LIA_phase_etry = tk.Entry(self.Labelframe1_3)
        self.LIA_phase_etry.place(relx=0.5, rely=0.447, height=20, relwidth=0.247
                , bordermode='ignore')
        self.LIA_phase_etry.configure(background="white")
        self.LIA_phase_etry.configure(disabledforeground="#a3a3a3")
        self.LIA_phase_etry.configure(font="-family {Arial} -size 12")
        self.LIA_phase_etry.configure(foreground="#000000")
        self.LIA_phase_etry.configure(highlightbackground="#d9d9d9")
        self.LIA_phase_etry.configure(highlightcolor="black")
        self.LIA_phase_etry.configure(insertbackground="black")
        self.LIA_phase_etry.configure(selectbackground="#c4c4c4")
        self.LIA_phase_etry.configure(selectforeground="black")

        self.Label1_1 = tk.Label(self.Labelframe1_3)
        self.Label1_1.place(relx=0.76, rely=0.435, height=24, width=38
                , bordermode='ignore')
        self.Label1_1.configure(activebackground="#f9f9f9")
        self.Label1_1.configure(activeforeground="black")
        self.Label1_1.configure(background="#d9d9d9")
        self.Label1_1.configure(disabledforeground="#a3a3a3")
        self.Label1_1.configure(font="-family {Arial} -size 12")
        self.Label1_1.configure(foreground="#000000")
        self.Label1_1.configure(highlightbackground="#d9d9d9")
        self.Label1_1.configure(highlightcolor="black")
        self.Label1_1.configure(text='''deg''')

        self.MW_freq_etry = ttk.Entry(self.Labelframe1_3)
        self.MW_freq_etry.place(relx=0.367, rely=0.775, relheight=0.08
                , relwidth=0.42, bordermode='ignore')
        self.MW_freq_etry.configure(font="-family {Arial} -size 12")
        self.MW_freq_etry.configure(state='readonly')
        self.MW_freq_etry.configure(takefocus="")

        self.MW_freq_btn = tk.Button(self.Labelframe1_3)
        self.MW_freq_btn.place(relx=0.057, rely=0.763, height=34, width=79
                , bordermode='ignore')
        self.MW_freq_btn.configure(activebackground="#ececec")
        self.MW_freq_btn.configure(activeforeground="#000000")
        self.MW_freq_btn.configure(background="#d9d9d9")
        self.MW_freq_btn.configure(disabledforeground="#a3a3a3")
        self.MW_freq_btn.configure(font="-family {Segoe UI} -size 12")
        self.MW_freq_btn.configure(foreground="#000000")
        self.MW_freq_btn.configure(highlightbackground="#d9d9d9")
        self.MW_freq_btn.configure(highlightcolor="black")
        self.MW_freq_btn.configure(pady="0")
        self.MW_freq_btn.configure(text='''MW freq.''')

        self.Label1_1 = tk.Label(self.Labelframe1_3)
        self.Label1_1.place(relx=0.8, rely=0.767, height=24, width=38
                , bordermode='ignore')
        self.Label1_1.configure(activebackground="#f9f9f9")
        self.Label1_1.configure(activeforeground="black")
        self.Label1_1.configure(background="#d9d9d9")
        self.Label1_1.configure(disabledforeground="#a3a3a3")
        self.Label1_1.configure(font="-family {Arial} -size 12")
        self.Label1_1.configure(foreground="#000000")
        self.Label1_1.configure(highlightbackground="#d9d9d9")
        self.Label1_1.configure(highlightcolor="black")
        self.Label1_1.configure(text='''GHz''')

        self.Spinbox1 = tk.Spinbox(self.Labelframe1_3, from_=1.0, to=100.0)
        self.Spinbox1.place(relx=0.367, rely=0.656, relheight=0.073
                , relwidth=0.15, bordermode='ignore')
        self.Spinbox1.configure(activebackground="#f9f9f9")
        self.Spinbox1.configure(background="white")
        self.Spinbox1.configure(buttonbackground="#d9d9d9")
        self.Spinbox1.configure(disabledforeground="#a3a3a3")
        self.Spinbox1.configure(font="-family {Arial} -size 12")
        self.Spinbox1.configure(foreground="black")
        self.Spinbox1.configure(highlightbackground="black")
        self.Spinbox1.configure(highlightcolor="black")
        self.Spinbox1.configure(insertbackground="black")
        self.Spinbox1.configure(selectbackground="#c4c4c4")
        self.Spinbox1.configure(selectforeground="black")

        self.TSeparator1 = ttk.Separator(self.Labelframe1_3)
        self.TSeparator1.place(relx=0.033, rely=0.576, relwidth=0.933
                , bordermode='ignore')

        self.Label1_3 = tk.Label(self.Labelframe1_3)
        self.Label1_3.place(relx=0.517, rely=0.645, height=24, width=38
                , bordermode='ignore')
        self.Label1_3.configure(activebackground="#f9f9f9")
        self.Label1_3.configure(activeforeground="black")
        self.Label1_3.configure(background="#d9d9d9")
        self.Label1_3.configure(disabledforeground="#a3a3a3")
        self.Label1_3.configure(font="-family {Arial} -size 12")
        self.Label1_3.configure(foreground="#000000")
        self.Label1_3.configure(highlightbackground="#d9d9d9")
        self.Label1_3.configure(highlightcolor="black")
        self.Label1_3.configure(text='''dB''')

        self.auto_sens_btn = tk.Button(self.Labelframe1_3)
        self.auto_sens_btn.place(relx=0.333, rely=0.126, height=23, width=45
                , bordermode='ignore')
        self.auto_sens_btn.configure(activebackground="#ececec")
        self.auto_sens_btn.configure(activeforeground="#000000")
        self.auto_sens_btn.configure(background="#d9d9d9")
        self.auto_sens_btn.configure(disabledforeground="#a3a3a3")
        self.auto_sens_btn.configure(font="-family {Segoe UI} -size 12")
        self.auto_sens_btn.configure(foreground="#000000")
        self.auto_sens_btn.configure(highlightbackground="#d9d9d9")
        self.auto_sens_btn.configure(highlightcolor="black")
        self.auto_sens_btn.configure(pady="0")
        self.auto_sens_btn.configure(text='''auto''')

        self.auto_phase_btn = tk.Button(self.Labelframe1_3)
        self.auto_phase_btn.place(relx=0.333, rely=0.439, height=23, width=45
                , bordermode='ignore')
        self.auto_phase_btn.configure(activebackground="#ececec")
        self.auto_phase_btn.configure(activeforeground="#000000")
        self.auto_phase_btn.configure(background="#d9d9d9")
        self.auto_phase_btn.configure(disabledforeground="#a3a3a3")
        self.auto_phase_btn.configure(font="-family {Segoe UI} -size 12")
        self.auto_phase_btn.configure(foreground="#000000")
        self.auto_phase_btn.configure(highlightbackground="#d9d9d9")
        self.auto_phase_btn.configure(highlightcolor="black")
        self.auto_phase_btn.configure(pady="0")
        self.auto_phase_btn.configure(text='''auto''')

        self.TLabel1_8 = ttk.Label(self.Labelframe1_3)
        self.TLabel1_8.place(relx=0.89, rely=0.13, height=22, width=23
                , bordermode='ignore')
        self.TLabel1_8.configure(background="#d9d9d9")
        self.TLabel1_8.configure(foreground="#000000")
        self.TLabel1_8.configure(font="-family {Arial} -size 12")
        self.TLabel1_8.configure(relief="flat")
        self.TLabel1_8.configure(text='''V''')

        self.TLabel1_9 = ttk.Label(self.Labelframe1_3)
        self.TLabel1_9.place(relx=0.89, rely=0.225, height=22, width=23
                , bordermode='ignore')
        self.TLabel1_9.configure(background="#d9d9d9")
        self.TLabel1_9.configure(foreground="#000000")
        self.TLabel1_9.configure(font="-family {Arial} -size 12")
        self.TLabel1_9.configure(relief="flat")
        self.TLabel1_9.configure(text='''s''')

        self.TLabel1_4 = ttk.Label(self.Labelframe1_3)
        self.TLabel1_4.place(relx=0.89, rely=0.328, height=22, width=23
                , bordermode='ignore')
        self.TLabel1_4.configure(background="#d9d9d9")
        self.TLabel1_4.configure(foreground="#000000")
        self.TLabel1_4.configure(font="-family {Arial} -size 12")
        self.TLabel1_4.configure(relief="flat")
        self.TLabel1_4.configure(text='''TC''')

        self.Labelframe1_4 = tk.LabelFrame(top)
        self.Labelframe1_4.place(relx=0.667, rely=0.125, relheight=0.337
                , relwidth=0.323)
        self.Labelframe1_4.configure(relief='groove')
        self.Labelframe1_4.configure(font="-family {Arial} -size 12 -weight bold")
        self.Labelframe1_4.configure(foreground="black")
        self.Labelframe1_4.configure(text='''Other''')
        self.Labelframe1_4.configure(background="#d9d9d9")
        self.Labelframe1_4.configure(highlightbackground="#d9d9d9")
        self.Labelframe1_4.configure(highlightcolor="black")

        self.TLabel16 = ttk.Label(self.Labelframe1_4)
        self.TLabel16.place(relx=0.034, rely=0.115, height=25, width=93
                , bordermode='ignore')
        self.TLabel16.configure(background="#d9d9d9")
        self.TLabel16.configure(foreground="#000000")
        self.TLabel16.configure(font="-family {Segoe UI} -size 12")
        self.TLabel16.configure(relief="flat")
        self.TLabel16.configure(text='''Temperature''')

        self.TLabel17 = ttk.Label(self.Labelframe1_4)
        self.TLabel17.place(relx=0.034, rely=0.198, height=25, width=73
                , bordermode='ignore')
        self.TLabel17.configure(background="#d9d9d9")
        self.TLabel17.configure(foreground="#000000")
        self.TLabel17.configure(font="-family {Segoe UI} -size 12")
        self.TLabel17.configure(relief="flat")
        self.TLabel17.configure(text='''Comment''')

        self.Temperature_etry = tk.Entry(self.Labelframe1_4)
        self.Temperature_etry.place(relx=0.379, rely=0.13, height=20
                , relwidth=0.221, bordermode='ignore')
        self.Temperature_etry.configure(background="white")
        self.Temperature_etry.configure(disabledforeground="#a3a3a3")
        self.Temperature_etry.configure(font="-family {Arial} -size 12")
        self.Temperature_etry.configure(foreground="#000000")
        self.Temperature_etry.configure(highlightbackground="#d9d9d9")
        self.Temperature_etry.configure(highlightcolor="black")
        self.Temperature_etry.configure(insertbackground="black")
        self.Temperature_etry.configure(selectbackground="#c4c4c4")
        self.Temperature_etry.configure(selectforeground="black")

        self.Label1_4 = tk.Label(self.Labelframe1_4)
        self.Label1_4.place(relx=0.617, rely=0.122, height=24, width=18
                , bordermode='ignore')
        self.Label1_4.configure(activebackground="#f9f9f9")
        self.Label1_4.configure(activeforeground="black")
        self.Label1_4.configure(background="#d9d9d9")
        self.Label1_4.configure(disabledforeground="#a3a3a3")
        self.Label1_4.configure(font="-family {Arial} -size 12")
        self.Label1_4.configure(foreground="#000000")
        self.Label1_4.configure(highlightbackground="#d9d9d9")
        self.Label1_4.configure(highlightcolor="black")
        self.Label1_4.configure(text='''K''')

        self.Text1 = tk.Text(self.Labelframe1_4)
        self.Text1.place(relx=0.017, rely=0.305, relheight=0.676, relwidth=0.962
                , bordermode='ignore')
        self.Text1.configure(background="white")
        self.Text1.configure(font="-family {Arial} -size 12")
        self.Text1.configure(foreground="black")
        self.Text1.configure(highlightbackground="#d9d9d9")
        self.Text1.configure(highlightcolor="black")
        self.Text1.configure(insertbackground="black")
        self.Text1.configure(selectbackground="#c4c4c4")
        self.Text1.configure(selectforeground="black")
        self.Text1.configure(wrap="word")

        self.set_scan_btn = tk.Button(top)
        self.set_scan_btn.place(relx=0.011, rely=0.476, height=34, width=129)
        self.set_scan_btn.configure(activebackground="#ececec")
        self.set_scan_btn.configure(activeforeground="#000000")
        self.set_scan_btn.configure(background="#d9d9d9")
        self.set_scan_btn.configure(disabledforeground="#a3a3a3")
        self.set_scan_btn.configure(font="-family {Segoe UI} -size 12")
        self.set_scan_btn.configure(foreground="#000000")
        self.set_scan_btn.configure(highlightbackground="#d9d9d9")
        self.set_scan_btn.configure(highlightcolor="black")
        self.set_scan_btn.configure(pady="0")
        self.set_scan_btn.configure(text='''Set CW Scan''')

        self.info_label = ttk.Label(top)
        self.info_label.place(relx=0.011, rely=0.531, height=25, width=214)
        self.info_label.configure(background="#d9d9d9")
        self.info_label.configure(foreground="#000000")
        self.info_label.configure(font="-family {Segoe UI} -size 12")
        self.info_label.configure(relief="flat")
        self.info_label.configure(text='''estimated scan duration: N/A''')

        self.Labelframe2 = tk.LabelFrame(top)
        self.Labelframe2.place(relx=0.011, rely=0.617, relheight=0.366
                , relwidth=0.979)
        self.Labelframe2.configure(relief='groove')
        self.Labelframe2.configure(font="-family {Arial} -size 12 -weight bold")
        self.Labelframe2.configure(foreground="black")
        self.Labelframe2.configure(text='''Electrochemistry''')
        self.Labelframe2.configure(background="#d9d9d9")

        self.TLabel4_6 = ttk.Label(self.Labelframe2)
        self.TLabel4_6.place(relx=0.106, rely=0.211, height=25, width=78
                , bordermode='ignore')
        self.TLabel4_6.configure(background="#d9d9d9")
        self.TLabel4_6.configure(foreground="#000000")
        self.TLabel4_6.configure(font="-family {Segoe UI} -size 12")
        self.TLabel4_6.configure(relief="flat")
        self.TLabel4_6.configure(text='''Low [mV]''')

        self.TLabel4_7 = ttk.Label(self.Labelframe2)
        self.TLabel4_7.place(relx=0.102, rely=0.316, height=25, width=88
                , bordermode='ignore')
        self.TLabel4_7.configure(background="#d9d9d9")
        self.TLabel4_7.configure(foreground="#000000")
        self.TLabel4_7.configure(font="-family {Segoe UI} -size 12")
        self.TLabel4_7.configure(relief="flat")
        self.TLabel4_7.configure(text='''High [mV]''')

        self.TLabel4_8 = ttk.Label(self.Labelframe2)
        self.TLabel4_8.place(relx=0.126, rely=0.421, height=25, width=58
                , bordermode='ignore')
        self.TLabel4_8.configure(background="#d9d9d9")
        self.TLabel4_8.configure(foreground="#000000")
        self.TLabel4_8.configure(font="-family {Segoe UI} -size 12")
        self.TLabel4_8.configure(relief="flat")
        self.TLabel4_8.configure(text='''# steps''')

        self.TLabel4_7 = ttk.Label(self.Labelframe2)
        self.TLabel4_7.place(relx=0.07, rely=0.632, height=25, width=118
                , bordermode='ignore')
        self.TLabel4_7.configure(background="#d9d9d9")
        self.TLabel4_7.configure(foreground="#000000")
        self.TLabel4_7.configure(font="-family {Segoe UI} -size 12")
        self.TLabel4_7.configure(relief="flat")
        self.TLabel4_7.configure(text='''go low [cycles]''')

        self.TLabel4_8 = ttk.Label(self.Labelframe2)
        self.TLabel4_8.place(relx=0.052, rely=0.526, height=25, width=128
                , bordermode='ignore')
        self.TLabel4_8.configure(background="#d9d9d9")
        self.TLabel4_8.configure(foreground="#000000")
        self.TLabel4_8.configure(font="-family {Segoe UI} -size 12")
        self.TLabel4_8.configure(relief="flat")
        self.TLabel4_8.configure(text='''stay high [cycles]''')

        self.electrochem_high_etry = tk.Entry(self.Labelframe2)
        self.electrochem_high_etry.place(relx=0.205, rely=0.333, height=20
                , relwidth=0.186, bordermode='ignore')
        self.electrochem_high_etry.configure(background="white")
        self.electrochem_high_etry.configure(disabledforeground="#a3a3a3")
        self.electrochem_high_etry.configure(font="TkFixedFont")
        self.electrochem_high_etry.configure(foreground="#000000")
        self.electrochem_high_etry.configure(highlightbackground="#d9d9d9")
        self.electrochem_high_etry.configure(highlightcolor="black")
        self.electrochem_high_etry.configure(insertbackground="black")
        self.electrochem_high_etry.configure(selectbackground="#c4c4c4")
        self.electrochem_high_etry.configure(selectforeground="black")

        self.electrochem_steps_etry = tk.Entry(self.Labelframe2)
        self.electrochem_steps_etry.place(relx=0.205, rely=0.439, height=20
                , relwidth=0.186, bordermode='ignore')
        self.electrochem_steps_etry.configure(background="white")
        self.electrochem_steps_etry.configure(disabledforeground="#a3a3a3")
        self.electrochem_steps_etry.configure(font="TkFixedFont")
        self.electrochem_steps_etry.configure(foreground="#000000")
        self.electrochem_steps_etry.configure(highlightbackground="#d9d9d9")
        self.electrochem_steps_etry.configure(highlightcolor="black")
        self.electrochem_steps_etry.configure(insertbackground="black")
        self.electrochem_steps_etry.configure(selectbackground="#c4c4c4")
        self.electrochem_steps_etry.configure(selectforeground="black")

        self.electrochem_stay_high_etry = tk.Entry(self.Labelframe2)
        self.electrochem_stay_high_etry.place(relx=0.205, rely=0.544, height=20
                , relwidth=0.186, bordermode='ignore')
        self.electrochem_stay_high_etry.configure(background="white")
        self.electrochem_stay_high_etry.configure(disabledforeground="#a3a3a3")
        self.electrochem_stay_high_etry.configure(font="TkFixedFont")
        self.electrochem_stay_high_etry.configure(foreground="#000000")
        self.electrochem_stay_high_etry.configure(highlightbackground="#d9d9d9")
        self.electrochem_stay_high_etry.configure(highlightcolor="black")
        self.electrochem_stay_high_etry.configure(insertbackground="black")
        self.electrochem_stay_high_etry.configure(selectbackground="#c4c4c4")
        self.electrochem_stay_high_etry.configure(selectforeground="black")

        self.electrochem_go_low_etry = tk.Entry(self.Labelframe2)
        self.electrochem_go_low_etry.place(relx=0.205, rely=0.646, height=20
                , relwidth=0.186, bordermode='ignore')
        self.electrochem_go_low_etry.configure(background="white")
        self.electrochem_go_low_etry.configure(disabledforeground="#a3a3a3")
        self.electrochem_go_low_etry.configure(font="TkFixedFont")
        self.electrochem_go_low_etry.configure(foreground="#000000")
        self.electrochem_go_low_etry.configure(highlightbackground="#d9d9d9")
        self.electrochem_go_low_etry.configure(highlightcolor="black")
        self.electrochem_go_low_etry.configure(insertbackground="black")
        self.electrochem_go_low_etry.configure(selectbackground="#c4c4c4")
        self.electrochem_go_low_etry.configure(selectforeground="black")

        self.electrochem_set_scan_btn = tk.Button(self.Labelframe2)
        self.electrochem_set_scan_btn.place(relx=0.201, rely=0.796, height=34
                , width=169, bordermode='ignore')
        self.electrochem_set_scan_btn.configure(activebackground="#ececec")
        self.electrochem_set_scan_btn.configure(activeforeground="#000000")
        self.electrochem_set_scan_btn.configure(background="#d9d9d9")
        self.electrochem_set_scan_btn.configure(disabledforeground="#a3a3a3")
        self.electrochem_set_scan_btn.configure(font="-family {Segoe UI} -size 12")
        self.electrochem_set_scan_btn.configure(foreground="#000000")
        self.electrochem_set_scan_btn.configure(highlightbackground="#d9d9d9")
        self.electrochem_set_scan_btn.configure(highlightcolor="black")
        self.electrochem_set_scan_btn.configure(pady="0")
        self.electrochem_set_scan_btn.configure(text='''Set Electrochem Scan''')

        self.electrochem_low_etry = tk.Entry(self.Labelframe2)
        self.electrochem_low_etry.place(relx=0.205, rely=0.235, height=20
                , relwidth=0.186, bordermode='ignore')
        self.electrochem_low_etry.configure(background="white")
        self.electrochem_low_etry.configure(disabledforeground="#a3a3a3")
        self.electrochem_low_etry.configure(font="TkFixedFont")
        self.electrochem_low_etry.configure(foreground="#000000")
        self.electrochem_low_etry.configure(highlightbackground="#d9d9d9")
        self.electrochem_low_etry.configure(highlightcolor="black")
        self.electrochem_low_etry.configure(insertbackground="black")
        self.electrochem_low_etry.configure(selectbackground="#c4c4c4")
        self.electrochem_low_etry.configure(selectforeground="black")

        self.TSeparator1_5 = ttk.Separator(top)
        self.TSeparator1_5.place(relx=0.017, rely=0.605, relwidth=0.968)


        # ------------------------------- PAGE automatically generated code inserted upto here -------------------------

        top.minsize(899,458) # dont let user to shrink the window miserably

        self.configure_entries() # populate the fields initially. Do it again if press the load from file btn
        self.load_btn.configure(command = self.load_parameters_from_spectrum) # press the load button -> load params,
                                                                              # configure the fields in gui
        self.set_scan_btn.configure(command=self.set_scan) # after pressing this biutton the scan parameters are set.

        self.electrochem_set_scan_btn.configure(command = self.set_echem_scan)
        self.LIA_phase_etry.configure(state='disabled')

        #------------- feedback to main module ---------------
        self.gui = top  # to open that if we need it next time
        self.scan_set = False # by default the scan is not set!

        #top.mainloop() # start the gui


    def show_gui(self):
        self.gui.mainloop()

    def unhide(self):
        self.gui.update()
        #self.configure_entries()
        self.gui.deiconify()
        self.gui.focus_set()

    def close_setting_window(self):
        self.gui.withdraw()

    def set_scan(self):
        """set the cw scan parameters. this is called by the "Set cw Scan" button"""

        print(' ... setting scan parameters to run a cw experiment ... ')
        #first we get values of all fields.
        self.bstart = float(self.B_start_etry.get())
        self.bstop = float(self.B_stop_etry.get())
        self.bstep = float(self.B_step_etry.get())
        self.gaussmeter = self.gaussmeter_state.get()
        print(self.gaussmeter)
        self.modamp = float(self.Mod_Amp_etry.get())
        self.modamp_dim = str(self.Gauss_Volt_Combobox.get())
        print('mod amp set in %s'%self.modamp_dim)
        self.modfreq = float(self.Mod_Freq_etry.get())*1000 # modfreq is in Hz

        # from values above construct the li level:
        self.calculate_modulation_amplitude()

        self.nruns = int(self.nscans_etry.get())
        self.li_sens = float(self.LIA_sens_combobox.get())
        print('LIA sensitivity set to %.1e'%self.li_sens)
        self.li_tc = float(self.TC_combobox.get())
        self.conv_time = int(self.LIA_conv_time_combobox.get())
        self.li_phase = float(self.LIA_phase_etry.get())

        print('autophae function has been implemented')
        state = str(self.auto_phase_btn['relief'])
        if state == tk.SUNKEN:  # if user pressed autophase button:
            if self.modfreq == 10000:
                self.li_phase = 291
            else:
                if self.modfreq == 100000:
                    self.li_phase = 338
                else:
                    self.li_phase = 0
                    print('cant set autophase for this modulation frequency. Do it yourself!')
            self.LIA_phase_etry.configure(state='normal')  # let program change that
            self.LIA_phase_etry.delete(0,END)
            self.LIA_phase_etry.insert(0, self.li_phase)
            self.LIA_phase_etry.configure(state = 'disabled')
            print(self.li_phase)


        # also send other parameters to the main module. That has the file to write!
        # ----------- these parameters are only written to the file, not affect the scan ----------
        self.attn = int(self.Spinbox1.get())
        self.mwfreq = -1 # this module does not measure the mw frequency.
        # It can display it but in the exp it might change, that is why we dont sent it to the performance module
        self.temp = float(self.Temperature_etry.get())
        self.comment = self.Text1.get("1.0", tk.END)

        self.calculate_scan_duration() # get yourself a coffee.

        self.scan_set = True
        print('self.scan_set: %d'%self.scan_set)
        # ---- at this point all parameters are taken. from now we can start the scan ----

    def calculate_scan_duration(self):
        """calculates duration of the cw experiment with parameters given in fields.
        assuming that when gaussmeter is used the script waits 30 seconds at the end of scan."""

        if not self.gaussmeter:
            duration = ((self.bstop-self.bstart)/self.bstep*self.li_tc*self.conv_time + 5)*self.nruns
            # (B steps * TC * CT + 5 sec after each scan) * nruns
        if self.gaussmeter:
            duration = ((self.bstop - self.bstart) / self.bstep * self.li_tc * self.conv_time + 30) * self.nruns

        # seconds to normal time
        m, s = divmod(duration, 60)
        h, m = divmod(m, 60)

        self.info_label.configure(text='')
        self.info_label.configure(text='CW exp: %d:%02d:%02d' % (h, m, s))

    def load_parameters_from_spectrum(self):
        '''open cw_spectrum, grab parameters, close spectrum, You dont have to plot it.'''
        from tkinter import filedialog
        file_path = filedialog.askopenfilename()
        print("opening spectrum at %s" % file_path)
        spectrum_A = cw_spectrum.cw_spectrum(file_path)  # create an instance of cw spectrum from file in file_path
        self.bstart = spectrum_A.bstart
        self.bstop = spectrum_A.bstop
        self.bstep = spectrum_A.bstep
        self.gaussmeter = spectrum_A.gaussmeter
        self.modamp = spectrum_A.modamp
        self.modampingauss = True
        print("Modulation amplitude interpreted as Gauss even though it might be volts in the file!")
        self.modfreq = spectrum_A.modfreq
        print("Number of scans not affected by import")
        self.li_sens = spectrum_A.li_sens
        self.li_tc = spectrum_A.li_tc
        self.conv_time = spectrum_A.conv_time
        self.li_phase = spectrum_A.li_phase
        self.attn = spectrum_A.attn

        # self.li_sens_dim = spectrum_A.li_sens_dim
        self.modamp_dim = spectrum_A.modamp_dim
        # self.li_tc_dim = spectrum_A.li_tc_dim

        print("___Reminder___: Check attenuation setting on the bridge")
        print("Temperature not affected by import")
        print("MW frequency not affected by import")
        print("filling in parameter entries ...")
        self.configure_entries()

    def configure_entries(self):
        # the fields in the gui are empty. we need to put something there.
        # lets start with B field entry.
        # bstart
        self.B_start_etry.delete(0,END)
        self.B_start_etry.insert(0, float(self.bstart))

        # bstop
        self.B_stop_etry.delete(0, END)
        self.B_stop_etry.insert(0, float(self.bstop))

        # bstart
        self.B_step_etry.delete(0, END)
        self.B_step_etry.insert(0, float(self.bstep))

        # gaussmeter
        from tkinter import BooleanVar
        self.gaussmeter_state = BooleanVar()
        self.Gaussmeter_checkbutton.configure(variable = self.gaussmeter_state, onvalue = True, offvalue = False)
        if self.gaussmeter:
            self.Gaussmeter_checkbutton.select() # do it when read parameters
        else:
            self.Gaussmeter_checkbutton.deselect()

        # mod amp entry
        self.Mod_Amp_etry.delete(0,END)
        self.Mod_Amp_etry.insert(0, float(self.modamp))

        # modamp in gauss or in volts?
        self.Gauss_Volt_Combobox.configure(state='readonly',values = ["G","V"])
        if 'V' in self.modamp_dim:
            self.Gauss_Volt_Combobox.current(1)  # for mod in Volts
            print('modulation set in V')
        else:
            if 'G' in self.modamp_dim:
                self.Gauss_Volt_Combobox.current(0)  # for mod in Gauss
                print('modulation set in G')



        # modulation frequency
        self.Mod_Freq_etry.delete(0,END)
        self.Mod_Freq_etry.insert(0, self.modfreq/1000) # mod freq is in kHz

        #scans
        self.nscans_etry.delete(0,END)
        self.nscans_etry.insert(0,int(self.nruns)) #nruns it is called in fscII argh

        # now sensitivity setting. uV mV nV... configure that box now



        setup_sens_value = self.li_sens # read value that is currently set, and acroll the combobox

        sens_values = [2e-9, 5e-9, 1e-8, 2e-8, 5e-8, 1e-7, 2e-7, 5e-7, 1e-6, 2e-6, 5e-6, 1e-5, 2e-5, 5e-5, 1e-4, 2e-4,
                       5e-4, 1e-3, 2e-3, 5e-3, 1e-2, 2e-2, 5e-2, 1e-1, 2e-1, 5e-1, 1] # order of value is its SCPI code

        formatted_sens_values = ["%.2e" % elem for elem in sens_values] # for better representability
        indx = sens_values.index(setup_sens_value)


        self.LIA_sens_combobox.configure(state='readonly',values = formatted_sens_values)
        self.LIA_sens_combobox.current(indx)

        # configure auto sens button here too
        self.auto_sens_btn.configure(command=self.autosens)

        # time constant combobox
        setup_time_constant = self.li_tc # read value that is currently set, and scroll the combobox
        time_constants = [1e-5, 3e-5, 1e-4, 3e-4, 1e-3, 3e-3, 1e-2, 3e-2, 1e-1, 3e-1, 1, 3, 1e+1, 3e+1, 1e+2, 3e+2,
                          1e+3, 3e+3, 1e+4, 3e+4]  # order of value is its SCPI code

        formatted_time_constants = ["%.2e" % elem for elem in time_constants]
        indx = time_constants.index(setup_time_constant)

        self.TC_combobox.configure(state='readonly', values=formatted_time_constants)
        self.TC_combobox.current(indx)


        # conversion time combobox
        setup_conversion_time = self.conv_time # read the conversion time first
        conversion_times = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20] # all available cts:
        self.LIA_conv_time_combobox.configure(state='readonly', values=conversion_times)
        indx = conversion_times.index(setup_conversion_time)
        self.LIA_conv_time_combobox.current(indx) # scroll combobox to the value that was set

        # phase entry
        self.LIA_phase_etry.delete(0,END)
        self.LIA_phase_etry.insert(0, self.li_phase) # li_phase is different for different modulation amplitudes

        # phase button
        self.auto_phase_btn.configure(command = self.autophase)
        self.auto_phase_btn.configure(relief = tk.SUNKEN)

        # MW freq button
        self.MW_freq_btn.configure(command = self.get_mw_freq)

        # MW freq entry
        self.MW_freq_etry.configure(state='active')
        self.MW_freq_etry.delete(0,END)
        self.MW_freq_etry.insert(0, 'X Band')
        self.MW_freq_etry.configure(state='readonly')

        # attenuation spinbox
        self.Spinbox1.delete(0,END)
        self.Spinbox1.configure(from_ = 0, to_ = 99)
        self.Spinbox1.delete(0, END)
        self.Spinbox1.insert(0,int(self.attn))

        # temperature entry
        self.Temperature_etry.delete(0,END)
        self.Temperature_etry.insert(0,self.temp)

        # --------- configuring electrochemical parameters ----------

        # low potential limit
        self.electrochem_low_etry.delete(0,END)
        self.electrochem_low_etry.insert(0,self.echem_low)

        # high potential limit
        self.electrochem_high_etry.delete(0,END)
        self.electrochem_high_etry.insert(0,self.echem_high)

        # how many echem potentials we want
        self.electrochem_steps_etry.delete(0, END)
        self.electrochem_steps_etry.insert(0, self.echem_nsteps)

        # how many cycles we stay high
        self.electrochem_stay_high_etry.delete(0, END)
        self.electrochem_stay_high_etry.insert(0, self.echem_stay_high)

        # for how many cycles we go low
        self.electrochem_go_low_etry.delete(0, END)
        self.electrochem_go_low_etry.insert(0, self.echem_go_low)


    def autophase(self):
        '''when you press autophase button this happens,
        if pressed, send phase suitable for the modulation frequency to lia.
        when released, send phase value from the phase field.'''

        state = str(self.auto_phase_btn['relief'])
        if state == tk.RAISED: # if autophase button was released before:
            self.modfreq = float(self.Mod_Freq_etry.get())*1000 # modulation frequency in kHz -> Hz
            if self.modfreq == 10000:
                self.li_phase = 291
            else:
                if self.modfreq == 100000:
                    self.li_phase = 338
                else:
                    self.li_phase = 0
                    print('cant calculate phase for this frequency. insert phase yourself')

            print("from modulation frequency of %.1f kHz autophase is %d" % (self.modfreq, self.li_phase))

            self.LIA_phase_etry.delete(0,END)
            self.LIA_phase_etry.insert(0,self.li_phase)

            self.auto_phase_btn.configure(relief = tk.SUNKEN) # keep it pressed
            self.LIA_phase_etry.configure(state = 'disabled')

        else:
            print("I will use your value later. Now it is %.2f deg" % float(self.LIA_phase_etry.get()))
            self.auto_phase_btn.configure(relief=tk.RAISED)  # keep it unpressed
            self.LIA_phase_etry.configure(state='normal')


    def autosens(self):
        '''when you press auto sens buttonm this happens.
        send auto sensitivity to LIA whhen pressed.
        Send value from combobox when released.'''

        state = str(self.auto_sens_btn['relief'])
        if state == tk.RAISED:  # if autophase button not pressed
            print("Ill send the autophase to lia")
            self.auto_sens_btn.configure(relief=tk.SUNKEN)  # keep it pressed
            self.LIA_sens_combobox.configure(state = 'disabled')

        else:
            print("I will use your value later. Now it is %.2f deg" % float(self.LIA_phase_etry.get()))
            self.auto_sens_btn.configure(relief=tk.RAISED)  # keep it unpressed
            self.LIA_sens_combobox.configure(state='normal')

    def get_mw_freq(self):
        print("get the mw frequency from the main module somehow. "
              "Try not to create another instance of communicator here, although why not")


# -----------------------  electrochemical parameters ----------------------------

    def set_echem_scan(self):


        print("setting electrochemistry scan with n=1...")
        self.nruns = 1   # scan parameters are now for one scan
        self.nscans_etry.delete(0,END)
        self.nscans_etry.insert(0,self.nruns)
        print("setting electrochemical scan parameters...")
        self.echem_low = float(self.electrochem_low_etry.get())  # lowest echem potetial in mV
        self.echem_high = float(self.electrochem_high_etry.get())  # highest echem potential in mV
        self.echem_nsteps = int(self.electrochem_steps_etry.get())  # how many potentials
        self.echem_stay_high = int(self.electrochem_stay_high_etry.get())  # N cycles for staying high
        self.echem_go_low = int(self.electrochem_go_low_etry.get()) # N cycles for going low for recovery between potentials

        print('-------- parameters of experiment --------')
        print('             [cw]             ')
        print('b_start: %.2f G'%self.bstart)
        print('b_stop: %.2f G' % self.bstop)
        print('attn: %d dB' % self.attn)
        print('etc')
        print('           [e-chem]           ')
        print('low: %.1f'%self.echem_low)
        print('high: %.1f'%self.echem_high)
        print('steps: %d'%self.echem_nsteps)
        print('etc')
        print('------------------------------------------')
        print('raady for run.')
        self.calculate_echem_scan_duration()

        self.scan_set = True


    def calculate_echem_scan_duration(self):
        """calculates duration of the cw experiment with parameters given in fields.
        assuming that when gaussmeter is used the script waits 30 seconds at the end of scan."""

        if not self.gaussmeter:
            duration = (((self.bstop-self.bstart)/self.bstep*self.li_tc*self.conv_time + 5)*self.nruns)*self.echem_nsteps*(self.echem_stay_high+self.echem_go_low)
            # (B steps * TC * CT + 5 sec after each scan) * nruns
        if self.gaussmeter:
            duration = (((self.bstop-self.bstart)/self.bstep*self.li_tc*self.conv_time + 30)*self.nruns)*self.echem_nsteps*(self.echem_stay_high+self.echem_go_low)

        # seconds to normal time
        m, s = divmod(duration, 60)
        h, m = divmod(m, 60)

        self.info_label.configure(text = '')
        self.info_label.configure(text='cw*e-chem exp: %d:%02d:%02d' % (h, m, s))
        print('exp over in %d:%02d:%02d' % (h, m, s))


    def calculate_modulation_amplitude(self):
        '''sets up li_level for given modamp, modamp_dim and li_freq'''
        # calculate self.li_level from modamp_in_g and mod_freq_in_Hz
        if 'G' in self.modamp_dim:  # if modamp is given in G
            # for different frequencies scaling factors differ. So far we know only two: 10 kHz and 100 kHz
            if self.modfreq == 100000:  # if modulation frequency is 100 kHz, use 0.27539 * self.scan_setting.modamp + 0.015642
                self.li_level = 0.27539 * self.modamp + 0.015642  # V. Calibration by Felix Kraffert 2014-02-04
            else:
                if self.modfreq == 10000:  # if modulation frequency is 10 kHz, use li_level = (141.54 * modamp + 11.45) * 0.001;
                    self.li_level = (141.54 * self.modamp + 11.45) * 0.001  # V. By Felix Kraffert 2014-02-04
                else:
                    print(
                        'cant set modulation amplitude for this frequency. Choose 10 kHz or 100 kHz.')
                    return -1

            print("Lock-in sin out amplitude for %.3f G: %.3f V" % (self.modamp, self.li_level))
        else:
            if 'V' in self.modamp_dim:
                self.li_level = self.modamp
                print("Lock-in sin out amplitude set in V: %.3f V" % self.li_level)
